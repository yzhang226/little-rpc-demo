// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldClockProtocol.proto

package org.cook.rpc.sample.model.clock;

/**
 * Protobuf type {@code org.cook.rpc.sample.model.clock.LocalTimes}
 */
public  final class LocalTimes extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:org.cook.rpc.sample.model.clock.LocalTimes)
    LocalTimesOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LocalTimes.newBuilder() to construct.
  private LocalTimes(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LocalTimes() {
    localTime_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LocalTimes(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              localTime_ = new java.util.ArrayList<org.cook.rpc.sample.model.clock.LocalTime>();
              mutable_bitField0_ |= 0x00000001;
            }
            localTime_.add(
                input.readMessage(org.cook.rpc.sample.model.clock.LocalTime.PARSER, extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        localTime_ = java.util.Collections.unmodifiableList(localTime_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.cook.rpc.sample.model.clock.WorldClockProtocol.internal_static_org_cook_rpc_sample_model_clock_LocalTimes_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.cook.rpc.sample.model.clock.WorldClockProtocol.internal_static_org_cook_rpc_sample_model_clock_LocalTimes_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.cook.rpc.sample.model.clock.LocalTimes.class, org.cook.rpc.sample.model.clock.LocalTimes.Builder.class);
  }

  public static final int LOCALTIME_FIELD_NUMBER = 1;
  private java.util.List<org.cook.rpc.sample.model.clock.LocalTime> localTime_;
  /**
   * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
   */
  public java.util.List<org.cook.rpc.sample.model.clock.LocalTime> getLocalTimeList() {
    return localTime_;
  }
  /**
   * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
   */
  public java.util.List<? extends org.cook.rpc.sample.model.clock.LocalTimeOrBuilder> 
      getLocalTimeOrBuilderList() {
    return localTime_;
  }
  /**
   * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
   */
  public int getLocalTimeCount() {
    return localTime_.size();
  }
  /**
   * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
   */
  public org.cook.rpc.sample.model.clock.LocalTime getLocalTime(int index) {
    return localTime_.get(index);
  }
  /**
   * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
   */
  public org.cook.rpc.sample.model.clock.LocalTimeOrBuilder getLocalTimeOrBuilder(
      int index) {
    return localTime_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    for (int i = 0; i < getLocalTimeCount(); i++) {
      if (!getLocalTime(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < localTime_.size(); i++) {
      output.writeMessage(1, localTime_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < localTime_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, localTime_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.cook.rpc.sample.model.clock.LocalTimes)) {
      return super.equals(obj);
    }
    org.cook.rpc.sample.model.clock.LocalTimes other = (org.cook.rpc.sample.model.clock.LocalTimes) obj;

    boolean result = true;
    result = result && getLocalTimeList()
        .equals(other.getLocalTimeList());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getLocalTimeCount() > 0) {
      hash = (37 * hash) + LOCALTIME_FIELD_NUMBER;
      hash = (53 * hash) + getLocalTimeList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.cook.rpc.sample.model.clock.LocalTimes parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.cook.rpc.sample.model.clock.LocalTimes parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.cook.rpc.sample.model.clock.LocalTimes parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.cook.rpc.sample.model.clock.LocalTimes parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.cook.rpc.sample.model.clock.LocalTimes parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.cook.rpc.sample.model.clock.LocalTimes parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.cook.rpc.sample.model.clock.LocalTimes parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.cook.rpc.sample.model.clock.LocalTimes parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.cook.rpc.sample.model.clock.LocalTimes parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.cook.rpc.sample.model.clock.LocalTimes parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.cook.rpc.sample.model.clock.LocalTimes parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.cook.rpc.sample.model.clock.LocalTimes parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.cook.rpc.sample.model.clock.LocalTimes prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.cook.rpc.sample.model.clock.LocalTimes}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.cook.rpc.sample.model.clock.LocalTimes)
      org.cook.rpc.sample.model.clock.LocalTimesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.cook.rpc.sample.model.clock.WorldClockProtocol.internal_static_org_cook_rpc_sample_model_clock_LocalTimes_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.cook.rpc.sample.model.clock.WorldClockProtocol.internal_static_org_cook_rpc_sample_model_clock_LocalTimes_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.cook.rpc.sample.model.clock.LocalTimes.class, org.cook.rpc.sample.model.clock.LocalTimes.Builder.class);
    }

    // Construct using org.cook.rpc.sample.model.clock.LocalTimes.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getLocalTimeFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (localTimeBuilder_ == null) {
        localTime_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        localTimeBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.cook.rpc.sample.model.clock.WorldClockProtocol.internal_static_org_cook_rpc_sample_model_clock_LocalTimes_descriptor;
    }

    @java.lang.Override
    public org.cook.rpc.sample.model.clock.LocalTimes getDefaultInstanceForType() {
      return org.cook.rpc.sample.model.clock.LocalTimes.getDefaultInstance();
    }

    @java.lang.Override
    public org.cook.rpc.sample.model.clock.LocalTimes build() {
      org.cook.rpc.sample.model.clock.LocalTimes result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.cook.rpc.sample.model.clock.LocalTimes buildPartial() {
      org.cook.rpc.sample.model.clock.LocalTimes result = new org.cook.rpc.sample.model.clock.LocalTimes(this);
      int from_bitField0_ = bitField0_;
      if (localTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          localTime_ = java.util.Collections.unmodifiableList(localTime_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.localTime_ = localTime_;
      } else {
        result.localTime_ = localTimeBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.cook.rpc.sample.model.clock.LocalTimes) {
        return mergeFrom((org.cook.rpc.sample.model.clock.LocalTimes)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.cook.rpc.sample.model.clock.LocalTimes other) {
      if (other == org.cook.rpc.sample.model.clock.LocalTimes.getDefaultInstance()) return this;
      if (localTimeBuilder_ == null) {
        if (!other.localTime_.isEmpty()) {
          if (localTime_.isEmpty()) {
            localTime_ = other.localTime_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureLocalTimeIsMutable();
            localTime_.addAll(other.localTime_);
          }
          onChanged();
        }
      } else {
        if (!other.localTime_.isEmpty()) {
          if (localTimeBuilder_.isEmpty()) {
            localTimeBuilder_.dispose();
            localTimeBuilder_ = null;
            localTime_ = other.localTime_;
            bitField0_ = (bitField0_ & ~0x00000001);
            localTimeBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getLocalTimeFieldBuilder() : null;
          } else {
            localTimeBuilder_.addAllMessages(other.localTime_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      for (int i = 0; i < getLocalTimeCount(); i++) {
        if (!getLocalTime(i).isInitialized()) {
          return false;
        }
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.cook.rpc.sample.model.clock.LocalTimes parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.cook.rpc.sample.model.clock.LocalTimes) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<org.cook.rpc.sample.model.clock.LocalTime> localTime_ =
      java.util.Collections.emptyList();
    private void ensureLocalTimeIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        localTime_ = new java.util.ArrayList<org.cook.rpc.sample.model.clock.LocalTime>(localTime_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.cook.rpc.sample.model.clock.LocalTime, org.cook.rpc.sample.model.clock.LocalTime.Builder, org.cook.rpc.sample.model.clock.LocalTimeOrBuilder> localTimeBuilder_;

    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public java.util.List<org.cook.rpc.sample.model.clock.LocalTime> getLocalTimeList() {
      if (localTimeBuilder_ == null) {
        return java.util.Collections.unmodifiableList(localTime_);
      } else {
        return localTimeBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public int getLocalTimeCount() {
      if (localTimeBuilder_ == null) {
        return localTime_.size();
      } else {
        return localTimeBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public org.cook.rpc.sample.model.clock.LocalTime getLocalTime(int index) {
      if (localTimeBuilder_ == null) {
        return localTime_.get(index);
      } else {
        return localTimeBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public Builder setLocalTime(
        int index, org.cook.rpc.sample.model.clock.LocalTime value) {
      if (localTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLocalTimeIsMutable();
        localTime_.set(index, value);
        onChanged();
      } else {
        localTimeBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public Builder setLocalTime(
        int index, org.cook.rpc.sample.model.clock.LocalTime.Builder builderForValue) {
      if (localTimeBuilder_ == null) {
        ensureLocalTimeIsMutable();
        localTime_.set(index, builderForValue.build());
        onChanged();
      } else {
        localTimeBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public Builder addLocalTime(org.cook.rpc.sample.model.clock.LocalTime value) {
      if (localTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLocalTimeIsMutable();
        localTime_.add(value);
        onChanged();
      } else {
        localTimeBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public Builder addLocalTime(
        int index, org.cook.rpc.sample.model.clock.LocalTime value) {
      if (localTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLocalTimeIsMutable();
        localTime_.add(index, value);
        onChanged();
      } else {
        localTimeBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public Builder addLocalTime(
        org.cook.rpc.sample.model.clock.LocalTime.Builder builderForValue) {
      if (localTimeBuilder_ == null) {
        ensureLocalTimeIsMutable();
        localTime_.add(builderForValue.build());
        onChanged();
      } else {
        localTimeBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public Builder addLocalTime(
        int index, org.cook.rpc.sample.model.clock.LocalTime.Builder builderForValue) {
      if (localTimeBuilder_ == null) {
        ensureLocalTimeIsMutable();
        localTime_.add(index, builderForValue.build());
        onChanged();
      } else {
        localTimeBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public Builder addAllLocalTime(
        java.lang.Iterable<? extends org.cook.rpc.sample.model.clock.LocalTime> values) {
      if (localTimeBuilder_ == null) {
        ensureLocalTimeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, localTime_);
        onChanged();
      } else {
        localTimeBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public Builder clearLocalTime() {
      if (localTimeBuilder_ == null) {
        localTime_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        localTimeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public Builder removeLocalTime(int index) {
      if (localTimeBuilder_ == null) {
        ensureLocalTimeIsMutable();
        localTime_.remove(index);
        onChanged();
      } else {
        localTimeBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public org.cook.rpc.sample.model.clock.LocalTime.Builder getLocalTimeBuilder(
        int index) {
      return getLocalTimeFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public org.cook.rpc.sample.model.clock.LocalTimeOrBuilder getLocalTimeOrBuilder(
        int index) {
      if (localTimeBuilder_ == null) {
        return localTime_.get(index);  } else {
        return localTimeBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public java.util.List<? extends org.cook.rpc.sample.model.clock.LocalTimeOrBuilder> 
         getLocalTimeOrBuilderList() {
      if (localTimeBuilder_ != null) {
        return localTimeBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(localTime_);
      }
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public org.cook.rpc.sample.model.clock.LocalTime.Builder addLocalTimeBuilder() {
      return getLocalTimeFieldBuilder().addBuilder(
          org.cook.rpc.sample.model.clock.LocalTime.getDefaultInstance());
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public org.cook.rpc.sample.model.clock.LocalTime.Builder addLocalTimeBuilder(
        int index) {
      return getLocalTimeFieldBuilder().addBuilder(
          index, org.cook.rpc.sample.model.clock.LocalTime.getDefaultInstance());
    }
    /**
     * <code>repeated .org.cook.rpc.sample.model.clock.LocalTime localTime = 1;</code>
     */
    public java.util.List<org.cook.rpc.sample.model.clock.LocalTime.Builder> 
         getLocalTimeBuilderList() {
      return getLocalTimeFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        org.cook.rpc.sample.model.clock.LocalTime, org.cook.rpc.sample.model.clock.LocalTime.Builder, org.cook.rpc.sample.model.clock.LocalTimeOrBuilder> 
        getLocalTimeFieldBuilder() {
      if (localTimeBuilder_ == null) {
        localTimeBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            org.cook.rpc.sample.model.clock.LocalTime, org.cook.rpc.sample.model.clock.LocalTime.Builder, org.cook.rpc.sample.model.clock.LocalTimeOrBuilder>(
                localTime_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        localTime_ = null;
      }
      return localTimeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:org.cook.rpc.sample.model.clock.LocalTimes)
  }

  // @@protoc_insertion_point(class_scope:org.cook.rpc.sample.model.clock.LocalTimes)
  private static final org.cook.rpc.sample.model.clock.LocalTimes DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.cook.rpc.sample.model.clock.LocalTimes();
  }

  public static org.cook.rpc.sample.model.clock.LocalTimes getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<LocalTimes>
      PARSER = new com.google.protobuf.AbstractParser<LocalTimes>() {
    @java.lang.Override
    public LocalTimes parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LocalTimes(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LocalTimes> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LocalTimes> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.cook.rpc.sample.model.clock.LocalTimes getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

