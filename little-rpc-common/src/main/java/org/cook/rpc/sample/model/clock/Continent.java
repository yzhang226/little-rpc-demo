// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldClockProtocol.proto

package org.cook.rpc.sample.model.clock;

/**
 * Protobuf enum {@code org.cook.rpc.sample.model.clock.Continent}
 */
public enum Continent
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>AFRICA = 0;</code>
   */
  AFRICA(0),
  /**
   * <code>AMERICA = 1;</code>
   */
  AMERICA(1),
  /**
   * <code>ANTARCTICA = 2;</code>
   */
  ANTARCTICA(2),
  /**
   * <code>ARCTIC = 3;</code>
   */
  ARCTIC(3),
  /**
   * <code>ASIA = 4;</code>
   */
  ASIA(4),
  /**
   * <code>ATLANTIC = 5;</code>
   */
  ATLANTIC(5),
  /**
   * <code>AUSTRALIA = 6;</code>
   */
  AUSTRALIA(6),
  /**
   * <code>EUROPE = 7;</code>
   */
  EUROPE(7),
  /**
   * <code>INDIAN = 8;</code>
   */
  INDIAN(8),
  /**
   * <code>MIDEAST = 9;</code>
   */
  MIDEAST(9),
  /**
   * <code>PACIFIC = 10;</code>
   */
  PACIFIC(10),
  ;

  /**
   * <code>AFRICA = 0;</code>
   */
  public static final int AFRICA_VALUE = 0;
  /**
   * <code>AMERICA = 1;</code>
   */
  public static final int AMERICA_VALUE = 1;
  /**
   * <code>ANTARCTICA = 2;</code>
   */
  public static final int ANTARCTICA_VALUE = 2;
  /**
   * <code>ARCTIC = 3;</code>
   */
  public static final int ARCTIC_VALUE = 3;
  /**
   * <code>ASIA = 4;</code>
   */
  public static final int ASIA_VALUE = 4;
  /**
   * <code>ATLANTIC = 5;</code>
   */
  public static final int ATLANTIC_VALUE = 5;
  /**
   * <code>AUSTRALIA = 6;</code>
   */
  public static final int AUSTRALIA_VALUE = 6;
  /**
   * <code>EUROPE = 7;</code>
   */
  public static final int EUROPE_VALUE = 7;
  /**
   * <code>INDIAN = 8;</code>
   */
  public static final int INDIAN_VALUE = 8;
  /**
   * <code>MIDEAST = 9;</code>
   */
  public static final int MIDEAST_VALUE = 9;
  /**
   * <code>PACIFIC = 10;</code>
   */
  public static final int PACIFIC_VALUE = 10;


  public final int getNumber() {
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Continent valueOf(int value) {
    return forNumber(value);
  }

  public static Continent forNumber(int value) {
    switch (value) {
      case 0: return AFRICA;
      case 1: return AMERICA;
      case 2: return ANTARCTICA;
      case 3: return ARCTIC;
      case 4: return ASIA;
      case 5: return ATLANTIC;
      case 6: return AUSTRALIA;
      case 7: return EUROPE;
      case 8: return INDIAN;
      case 9: return MIDEAST;
      case 10: return PACIFIC;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Continent>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Continent> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Continent>() {
          public Continent findValueByNumber(int number) {
            return Continent.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.cook.rpc.sample.model.clock.WorldClockProtocol.getDescriptor().getEnumTypes().get(0);
  }

  private static final Continent[] VALUES = values();

  public static Continent valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Continent(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:org.cook.rpc.sample.model.clock.Continent)
}

